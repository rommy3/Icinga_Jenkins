/*
object CheckCommand "migration-check-command" {
        import "plugin-check-command"
        vars.USER1 = PluginDir
}
*/


/* Command objects */

/* Notification Commands
 *
 * Please check the documentation for all required and
 * optional parameters.
 */

object NotificationCommand "mail-host-notification" {
  command = [ ConfigDir + "/scripts/mail-host-notification.sh" ]

  arguments += {
    "-4" = "$notification_address$"
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_hostoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_hoststate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-v" = "$notification_logtosyslog$"
  }

  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_hostoutput = "$host.output$"
    notification_hoststate = "$host.state$"
    notification_useremail = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  command = [ ConfigDir + "/scripts/mail-service-notification.sh" ]

  arguments += {
    "-4" = "$notification_address$"
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-e" = {
      required = true
      value = "$notification_servicename$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_serviceoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_servicestate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-u" = {
      required = true
      value = "$notification_servicedisplayname$"
    }
    "-v" = "$notification_logtosyslog$"
  }

  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_servicename = "$service.name$"
    notification_serviceoutput = "$service.output$"
    notification_servicestate = "$service.state$"
    notification_useremail = "$user.email$"
    notification_servicedisplayname = "$service.display_name$"
  }
}


/*
 * If you prefer to use the notification scripts with environment
 * variables instead of command line parameters, you can use
 * the following commands. They have been updated from < 2.7
 * to support the new notification scripts and should help
 * with an upgrade.
 * Remove the comment blocks and comment the notification commands above.

*/

/*

object NotificationCommand "mail-host-notification" {
  command = [ ConfigDir + "/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTDISPLAYNAME = "$host.display_name$"
    HOSTNAME = "$host.name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  command = [ ConfigDir + "/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICENAME = "$service.name$"
    HOSTNAME = "$host.name$"
    HOSTDISPLAYNAME = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}
*/





object CheckCommand "migration-check-command" {
        import "plugin-check-command"
        vars.USER1 = PluginDir
}


object CheckCommand "check_uptime" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_uptime.sh" ]

    arguments = {
        "-h" = "$address$"
        "-s" = "$ARG1$"
        "-w" = "$ARG2$"
        "-c" = "$ARG3$"
    }

}

object CheckCommand "check_linux_RAM" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_linux_RAM_snmp.sh -H $address$ -C $ARG1$ -w $ARG2$ -c $ARG3$"


}

#### Disk usage for WINDOWS DEVICES #######

object CheckCommand "check_win_all_drive" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_win_snmp_alldrive.sh -h $address$ -s $ARG1$ -w $ARG2$ -c $ARG3$"


}

object CheckCommand "check_win_snmp_cpu" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_win_snmp_cpu.sh -h $address$ -s $ARG1$ -w $ARG2$ -c $ARG3$"


}

object CheckCommand "check-host-alive" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_ping -H $address$ -w 3000.0,70% -c 5000.0,100% -p 5"


}

object CheckCommand "check_ping" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_ping -H $address$ -w 800.0,70% -c 1500.0,100% -p 5"


}

object CheckCommand "check_iftraffic_new" {
       import "migration-check-command"
       import "plugin-check-command"
       command = [ PluginDir + "/check_iftraffic43a.pl" ]
       arguments = {
       "-H" = "$address$"
       "-C" = "$snmp_community$"
       "-i" = "$if_index$"
       "-b" = "$if_bandwidth$"
       "-u" = "$if_unit$"
       "-w" = "$if_warn$"
       "-c" = "$if_crit$"
       "-B" = {
              set_if = "$if_bits$"
              }
       }
       vars.host_address = "$address$"
       vars.if_bits = false
}

object CheckCommand "check_port" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_port.pl -p $ARG1$ -h $address$ -v"

}

object CheckCommand "check_snmp_process" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_snmp_process.pl -H $address$ -C $ARG1$ -n $ARG2$ -2 -F -c 0 -v -t 60 -o 9000"

}

#object CheckCommand "check_snmp_process" {
#        import "migration-check-command"
#        import "plugin-check-command"
#        command = "$USER1$/check_snmp_process -C $ARG1$ -H $ARG2$ -m $ARG3$"
#
#
#}

object CheckCommand "check_curly" {
    import "migration-check-command"
    import "plugin-check-command"
    command = "$USER1$/check_curly -u $ARG1$ -k -f --nullcookiejar" 

}

object CheckCommand "check_cisco_mem" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_cisco_mem_usage_new -h $address$ -s $ARG1$ -w $ARG2$ -c $ARG3$"

}

object CheckCommand "check_cisco_int_status" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_cisco_cpu_core00 -H $address$ -C $string$ -t int -i $if_index$"

}

#object CheckCommand "check_cisco_cpu_status" {
#        import "migration-check-command"
#        import "plugin-check-command"
#        command = "$USER1$/check_switch_cpu_load.sh -h $address$ -s $ARG1$ -w $ARG2$ -c $ARG3$ -o .1.3.6.1.4.1.9.9.109.1.1.1.1.7"
#
#}

object CheckCommand "check_cisco_cpu_status" {
       import "migration-check-command"
       import "plugin-check-command"
       command = [ PluginDir + "/check_switch_cpu_load.sh" ]
       arguments = {
       "-h" = "$host_address$"
       "-s" = "$ARG1$"
       "-w" = "$ARG2$"
       "-c" = "$ARG3$"
       "-o" = "1.3.6.1.4.1.9.9.109.1.1.1.1.7"
	}
	vars.host_address = "$address$"

}

object CheckCommand "check_pan_firewall" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_pan_firewall.sh  $address$ $ARG1$ $SERV$  $ARG2$ $ARG3$"

}


object CheckCommand "check_host_uptime" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_uptime.sh" ]

    arguments = {
        "-h" = "$address$"
        "-s" = "$ARG1$"
        "-w" = "90"
        "-c" = "80"
    }

}

####### Fortigate-Firewall Script Usgae: #######
#
#Usage: test.sh -h <host> -s <community string> -C <check type> -w <warning in %> -c <critical in %>
#Check types should be one of the following
#cpu
#mem
#sessions
#bw
#In the mentioned order first one is to check CPU usage, next is mem usage, next is active sessions and last is bandwidth usage of cluster member


object CheckCommand "check_fortigate"{
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_fortigate_usage.sh -h $address$ -C $ARG1$ -s $ARG2$ -w $ARG3$ -c $ARG4$"


}


############# RAM Usage for Windows Machine ###########

#Script Usage: check_win_snmp_ram.sh -h <host> -s <community string> -w <warning in %> -c <critical in %>

object CheckCommand "check_win_snmp_ram.sh"{
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_win_snmp_ram.sh -h $address$ -s $ARG1$ -w $ARG2$ -c $ARG3$"


}


###### If_Status using index value ###########
#usage:
#check_ifoperstatus -k <IF_KEY> -H <HOSTNAME> [-C <community>]

object CheckCommand "check_ifoperstatus"{
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_ifoperstatus -H $address$ -k $ARG1$ -C $ARG2$"


}

object CheckCommand "check_win_all_drive_Wallet_HR"{
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_all_disk_snmp_new.pl -t $address$ -p $ARG1$ -w $ARG2$ -c $ARG3$ -x '^D:\\\\/' -i 'C:\\\\'"

}

object CheckCommand "check_snmp" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_snmp" ]

    arguments = {
        "-H" = "$address$"
        "-C" = "$ARG1$"
        "-w" = "90"
        "-c" = "80"
       "-o" = "1.3.6.1.4.1.9.9.109.1.1.1.1.7"
    }

}

object CheckCommand "check_pan_firewall.sh"{
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_pan_firewall.sh  $address$  $Community$ sessionuse $Warn$ $Crit$"

}

object CheckCommand "check_connections.pl" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_connections.pl" ]

    arguments = {
     #   "-H" = "$address$"
      #  "-l" = "$ARG1$"
        "-w" = "200"
        "-c" = "300"
     #  "-o" = "1.3.6.1.4.1.9.9.109.1.1.1.1.7"
    }

}

###Disk usage partition for Mtap_Domino###

object CheckCommand "check_win_drive_part" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_all_disk_snmp.pl -t $address$ -p $ARG1$ -w $ARG2$ -c $ARG3$ -x '^/' -i '/boot','/'"


}

object CheckCommand "Check_PAN_Firewall" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_pan_firewall.sh  $address$ $ARG1$ $SERV$ $ARG2$ $ARG3$"

}

object CheckCommand "check_PAN_ALL" {
        import "migration-check-command"
        import "plugin-check-command"
        command = "$USER1$/check_PAN_ALL -h $address$ -s $ARG1$ -C $SERV$ -w $ARG2$  -c $ARG3$"
}
