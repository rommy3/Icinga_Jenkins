#! /usr/bin/python

import argparse, sys, time
from pysnmp.entity.rfc3413.oneliner import cmdgen
from decimal import *

args_list = None
ifspeed_oid = '1.3.6.1.2.1.31.1.1.1.15'
ifspeed = int
avgin = int
avgout = int
maxin = int
maxout = int
timestamp = int
SUCCESS = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3
exit_str = [ "OK", "Warning", "Critical", "Unknown" ]

parser=argparse.ArgumentParser(description="Check Interface traffic usage in percentage using mrtg log and snmp oid ifHIghSpeed")
parser.add_argument('-t', '--host', required=True, help='host name')
parser.add_argument('-s', '--comstr', required=True, help='community string')
parser.add_argument('-i', '--ifindex', required=True, type=int, help='interface index')
parser.add_argument('-l', '--logfile', required=True, help='mrtg log file')
parser.add_argument('-w', '--warning', required=True, type=int, help='mrtg log file')
parser.add_argument('-c', '--critical', required=True, type=int, help='mrtg log file')
parser.add_argument('-e', '--expire', required=True, type=int, help='Minutes after which log expires')
parser.add_argument('-a', '--aggregation', help="(AVG|MAX) Test average or maximum")

def parseargs(args):
   global args_list
   args.pop(0)
   args_list = parser.parse_args(args)

def output(exitcode, msg, perfdata=None):
   output_str = "RESPONSE: " + exit_str[exitcode] + "-" + msg
   if perfdata != None:
      output_str = output_str + ("|%s" % (perfdata))
   print output_str
   exit(exitcode)

def getifspeed():
   global ifspeed
   cmdGen=cmdgen.CommandGenerator()
   try:
      errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
          cmdgen.CommunityData(args_list.comstr),
          cmdgen.UdpTransportTarget((args_list.host,161)),
          (ifspeed_oid+'.'+str(args_list.ifindex))
      )
   except Exception, err:
      error_str="Unexpected error %s" % (err)
      output(UNKNOWN, error_str)
   if errorIndication:
      output(UNKNOWN, "Error "+str(errorIndication))
   else:
      if errorStatus:
         error=('Error %s at %s' % (
             errorStatus.prettyPrint(),
             errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
             )
         )
         output(UNKNOWN, error)
      else:
         name, ifspeed = varBinds[0]
         if ifspeed == "":
            output(UNKNOWN, "No such interface/ Unbale to get max speed of this interface")

def processlog():
   global timestamp, avgin, avgout, maxin, maxout
   try:
      fp = open(args_list.logfile, "r")
      lineno = 0
   except:
      output(UNKNOWN, "Error Unbale to open MRTG log file")
   for line in fp:
      lineno += 1
      if lineno == 1:
         continue
      if lineno > 2:
         break
      curline = line.rstrip()
      timestamp, avgin, avgout, maxin, maxout = curline.split()
   fp.close()
   if lineno < 2:
      output(UNKNOWN, "Error Unable to process MRTG log file")

def hrformat(data):
   if data < 1024:
      return ("%fB/s" % data)
   elif data < (1024*1024):
      return ("%.2fKB/s" % (float(data) / 1024.0))
   else:
      return ("%.2fMB/s" % (float(data) / 1024.0 /1024.0))

def checkmrtgdata():
   current_time = int(time.time())
   log_time = int(timestamp)
   if args_list.expire > 0 and (current_time - log_time) > (args_list.expire * 60):
      output(WARNING, "MRTG data has expired %d minutes old" % ((current_time - log_time) / 60))

def checkthres():
   use_average = True
   if args_list.aggregation != None and args_list.aggregation == "MAX":
      use_average = False
   if use_average == False:
      incoming_rate = int(maxin)
      outgoing_rate = int(maxout)
   else:
      incoming_rate = int(avgin)
      outgoing_rate = int(avgout)
   incoming_rate_str = hrformat(incoming_rate)
   outgoing_rate_str = hrformat(outgoing_rate)
   total_rate = (incoming_rate + outgoing_rate) * 8
   max_rate = int(ifspeed) * 1000 * 1000
   util_rate = int((Decimal(total_rate) / Decimal(max_rate)) * 100)
   if util_rate >= args_list.critical:
      state = CRITICAL
   elif util_rate >= args_list.warning and util_rate < args_list.critical:
      state = WARNING
   else:
      state = SUCCESS
   perfdata = ("util=%d%%;%d;%d;0 in=%dB out=%dB" % (util_rate, args_list.warning, args_list.critical, incoming_rate, outgoing_rate))
   output(state, ("Traffic In/Out consumes %d%%, In = %s, Out = %s" % (util_rate, incoming_rate_str, outgoing_rate_str)), perfdata)

def main():
   parseargs(sys.argv)
   getifspeed()
   processlog()
   checkmrtgdata()
   checkthres()

if __name__ == "__main__":
   main()
